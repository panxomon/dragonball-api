// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "dragonball-test/internal/character/domain"

	mock "github.com/stretchr/testify/mock"
)

// CharacterService is an autogenerated mock type for the CharacterService type
type CharacterService struct {
	mock.Mock
}

// CreateCharacter provides a mock function with given fields: ctx, name
func (_m *CharacterService) CreateCharacter(ctx context.Context, name string) (*domain.Character, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateCharacter")
	}

	var r0 *domain.Character
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Character, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Character); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Character)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCharacterService creates a new instance of CharacterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCharacterService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CharacterService {
	mock := &CharacterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
